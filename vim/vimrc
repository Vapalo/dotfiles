" Plugins {{{

" Auto-download Plug if it's missing
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plug')

" Language support for pretty much everything (full list here: https://github.com/sheerun/vim-polyglot)
Plug 'sheerun/vim-polyglot'

" 24bit colorscheme
Plug 'jacoborus/tender.vim'

" A better statusline
Plug 'vim-airline/vim-airline'

" Insert/delete brackets, parens or quotes in pair
Plug 'jiangmiao/auto-pairs'

" FZF vim integration
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'

" Display Git diff in the sign column
Plug 'airblade/vim-gitgutter'


" Adds icons for Airline's statusline and tabline
Plug 'ryanoasis/vim-devicons'

" Configure puppet real time linting
Plug 'dense-analysis/ale'

" Tabular
Plug 'godlygeek/tabular'

Plug 'morhetz/gruvbox'

call plug#end()

" }}}
"puppet config {{{
"
let b:ale_linters = ['puppet', 'puppetlint']
let b:ale_fixers = ['puppetlint']
let g:ale_open_list = 1

"}}}
" Colors and fonts {{{

" Tell Vim 256 colors are supported
set t_Co=256

" Display in UTF-8
set encoding=utf-8

" Enable termguicolors
if has('termguicolors')
  set termguicolors
endif


" Set Vim-specific sequences for RGB colors
if exists('&t_8f') && exists('&t_8b')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Color scheme / theme
colorscheme gruvbox
set background=dark

" }}}
" Other settings {{{
" Show line numbers, except for special filetypes {{{
"
if index(['undotree', 'diff', 'gitcommit'], &ft) < 0
  set number
  " Show relative line numbers in normal mode
  augroup numbertoggle
    autocmd! * <buffer>
    autocmd BufEnter,FocusGained,InsertLeave <buffer> set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   <buffer> set norelativenumber
    "autocmd BufEnter,FocusGained,InsertLeave * call SetRelNumber(1)
    "autocmd BufLeave,FocusLost,InsertEnter   * call SetRelNumber(0)
  augroup END
endif
" }}}
" Enable syntax highlighting {{{
syntax on
" }}}
" Bind leader key to , {{{
let mapleader=','

" }}}
"Automatically validate syntax when saving .pp files {{{
autocmd BufWritePost ?*.pp !puppet parser validate <afile>
" }}}
" Make comments font italic {{{
"
highlight Comment cterm=italic
highlight Comment gui=italic
" }}}
" Folding {{{
" 
nnoremap <Space> za
set foldenable
set foldmethod=marker
set foldlevel=0
let g:markdown_folding = 1
let g:markdown_fold_style = 'nested'
" }}}
" Autosave and autoload folds {{{
"
autocmd BufWinLeave ?. mkview
autocmd BufWinEnter ?. silent loadview
" }}}
" Automatically close error list on quit / close {{{
"
" This was used for ALE, but it MIGHT help with other extensions as well
autocmd QuitPre * if empty(&bt) | lclose | endif
" }}}
" Floating stuff {{{

function! OpenFloatingWin()
  let height = &lines - 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)

  let opts = {
    \ 'relative': 'editor',
    \ 'row': height * 0.3,
    \ 'col': col + 30,
    \ 'width': width * 3 / 4,
    \ 'height': height / 2
    \ }

  let buf = nvim_create_buf(v:false, v:true)
  let win = nvim_open_win(buf, v:true, opts)

  call setwinvar(win, '&winhl', 'Normal:Pmenu')

  setlocal
    \ buftype=nofile
    \ nobuflisted
    \ bufhidden=hide
    \ nonumber
    \ norelativenumber
    \ signcolumn=no
endfunction

" }}}
" Tabular {{{
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a<bar> :Tabularize /\|<CR>
vmap <Leader>a<bar> :Tabularize /\|<CR>
" }}}
" Map fzf to crtl+f inside vim {{{
vnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <C-f> :Files<CR>
" }}}
" Live preview os substitution results {{{
"
if (has('nvim'))
  set inccommand=nosplit
endif
" }}}
" }}}
